#!/bin/bash

#
# MIT License
#
# Copyright (c) 2023 University of Oregon, Kevin Huck
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# Absolute path this script is in, thus /home/user/bin
SCRIPTPATH="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
BASEDIR="$(dirname $SCRIPTPATH)"
#BASEDIR=@CMAKE_INSTALL_PREFIX@
LIBDIR=lib
if [ ! -d ${BASEDIR}/${LIBDIR} ] ; then
    LIBDIR=lib64
fi

usage() {
    message="
Usage:
$(basename "$0") <ZS options> executable <executable options>

where ZS options are zero or more of:
    --zs:period <value>     specify frequency of OS/HW sampling
                            (integer seconds, default: 1)
    --zs:async-core <value> specify core/HWT where ZeroSum async thread should be pinned
                            (integer id, default: last ID in process affinity list)
    --zs:details            report detailed output
                            (boolean, default: false)
    --zs:verbose            provide verbose diagnostic output
                            (boolean, default: false)
    --zs:heartbeat          provide periodic memory consumption 'heartbeat'
                            (boolean, default: false)
    --zs:signal-handler     register a signal handler in ZeroSum to handle crashes
                            (boolean, default: false)
    --zs:use-pid            Use the hostname.pid instead of MPI rank for log file name
                            (boolean, default: false)
    --zs:openmp             Enable OpenMP support without OMPT (GCC for example)
                            (boolean, default: false)
    --zs:deadlock           Enable deadlock detection support
                            (boolean, default: false)
    --zs:lock-duration <value>   Deadlock detection support after <value> seconds
                            (integer seconds, default: 5)
    --zs:debug              Run in debugger 'gdb'
                            (boolean, default: false)
    --zs:debugger <name>    Run in debugger <name>
                            (boolean, default: gdb)
    --zs:map-cores          Map cores from OS index to Core (requires HWLOC)
                            (boolean, default: false)
    --zs:map-pus            Map cores from OS index to PU (requires HWLOC
                            and assumes that SMP/hyperthreading is enabled and used)
                            (boolean, default: false)
    "
    echo "${message}"
    exit 1
}

period=1.0
prog=""
PARAMS=""
debug=no
debugger=`which gdb`

if [ $# -eq 0 ] ; then
    usage
fi

PARAMS=""
while (( "$#" )); do
  case "$1" in
    --zs:period)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        export ZS_PERIOD=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        usage
      fi
      ;;
    --zs:signal-handler)
      export ZS_SIGNAL_HANDLER=1
      shift
      ;;
    --zs:details)
      export ZS_DETAILS=1
      shift
      ;;
    --zs:verbose)
      export ZS_VERBOSE=1
      export OMP_TOOL_VERBOSE_INIT=stdout
      shift
      ;;
    --zs:heartbeat)
      export ZS_HEART_BEAT=1
      shift
      ;;
    --zs:map-cores)
      export ZS_MAP_CORES=1
      shift
      ;;
    --zs:map-pus)
      export ZS_MAP_PUS=1
      shift
      ;;
    --zs:use-pid)
      export ZS_USE_PID=1
      shift
      ;;
    --zs:openmp)
      export ZS_USE_OPENMP=1
      shift
      ;;
    --zs:deadlock)
      export ZS_DETECT_DEADLOCK=1
      shift
      ;;
    --zs:lock-duration)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        export ZS_DEADLOCK_DURATION=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        usage
      fi
      ;;
    --zs:async-core)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        export ZS_ASYNC_CORE=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        usage
      fi
      ;;
    --zs:debugger)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        export debugger=$2
        debug=yes
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        usage
      fi
      ;;
    --zs:debug)
      debug=yes
      shift
      ;;
    --zs:help)
      usage
      ;;
    --zs:*) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      usage
      ;;
    *) # preserve positional arguments
      if [ "$prog" = "" ] ; then
        prog=$1
      fi
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done
# set positional arguments in their proper place
eval set -- "${PARAMS}"

if [ ${#PARAMS} -eq 0 ] ; then
    usage
fi

myrank=0
# Detect our MPI rank!
if [ ! -z ${PMI_RANK+x} ] ; then
    myrank=${PMI_RANK}
fi
if [ ! -z ${ALPS_APP_PE+x} ] ; then
    myrank=${ALPS_APP_PE}
fi
if [ ! -z ${CRAY_PMI_RANK+x} ] ; then
    myrank=${CRAY_PMI_RANK}
fi
if [ ! -z ${OMPI_COMM_WORLD_RANK+x} ] ; then
    myrank=${OMPI_COMM_WORLD_RANK}
fi
if [ ! -z ${PBS_TASKNUM+x} ] ; then
    myrank=${PBS_TASKNUM}
fi
if [ ! -z ${PBS_O_TASKNUM+x} ] ; then
    myrank=${PBS_O_TASKNUM}
fi
if [ ! -z ${SLURM_PROCID+x} ] ; then
    myrank=${SLURM_PROCID}
fi

if [ $debug = yes ] ; then
    if [ "${myrank}" == "0" ] ; then
        rm -f ./.gdbcmds
    else
        sleep 1
    fi
fi

# Setup all the library paths, and library preloads to support what was requested
# NOTE: we add the ":" to each library name, becuase stupid APPLE isn't smart enough
# to handle an empty library name and tries to load a library named '' :(
if [ "x${LD_LIBRARY_PATH}" = "x" ] ; then
  LD_LIBRARY_PATH=${BASEDIR}/${LIBDIR}
else
  LD_LIBRARY_PATH=${BASEDIR}/${LIBDIR}:${LD_LIBRARY_PATH}
fi

PRELOAD=${BASEDIR}/${LIBDIR}/@ZS_LIBNAME@.so
mpi=@ZS_USE_MPI@
export OMP_TOOL=enabled
export OMP_TOOL_LIBRARIES=${PRELOAD}

if [ $debug = yes ] ; then
    if [ "${myrank}" == "0" ] ; then
        echo "set env LD_PRELOAD=${PRELOAD}" >> ./.gdbcmds
        if [ $mpi = yes ]; then
            echo "run" >> ./.gdbcmds
            echo "info threads" >> ./.gdbcmds
            echo "bt" >> ./.gdbcmds
            echo "thread 1" >> ./.gdbcmds
            echo "bt" >> ./.gdbcmds
            echo "quit" >> ./.gdbcmds
                gdbargs="-batch -q"
        fi
    else
        # Give rank 0 enough time to write the .gdbcmds file
        until [ -f ./.gdbcmds ] ; do
            sleep 1
        done
    fi
    ${debugger} -x ./.gdbcmds ${gdbargs} --args ${PARAMS}
    rm -f ./.gdbcmds
else
    export LD_PRELOAD=${PRELOAD}
    ${PARAMS}
    unset LD_PRELOAD
fi
